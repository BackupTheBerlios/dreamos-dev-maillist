From finarfin at mail.berlios.de  Tue Dec 30 21:38:14 2008
From: finarfin at mail.berlios.de (finarfin at BerliOS)
Date: Tue, 30 Dec 2008 21:38:14 +0100
Subject: [Dreamos-dev] r42 - in trunk: . boot include include/libc
	include/mem libc mem misc shell
Message-ID: <200812302038.mBUKcEAY013607@sheep.berlios.de>

Author: finarfin
Date: 2008-12-30 21:38:10 +0100 (Tue, 30 Dec 2008)
New Revision: 42

Modified:
   trunk/.bochsrc
   trunk/TODO
   trunk/bl.img
   trunk/boot/grub.img
   trunk/dreamos.img
   trunk/include/libc/string.h
   trunk/include/mem/kheap.h
   trunk/include/version.h
   trunk/kernel.c
   trunk/libc/string.c
   trunk/mem/fismem.c
   trunk/mem/kheap.c
   trunk/misc/ordered_list.c
   trunk/shell/shell.c
Log:
Aggiunta funzione free_node per tenere traccia dei nodi dell'heap liberati con la merge che altrimenti andrebbero persi.
Modificata alloc_node in modo che ora usa se disponibili, i nodi scartati dalla merge
Modificata la free


Modified: trunk/.bochsrc
===================================================================
--- trunk/.bochsrc	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/.bochsrc	2008-12-30 20:38:10 UTC (rev 42)
@@ -16,8 +16,8 @@
 # NOTE: if you use the "wx" configuration interface, you must also use
 # the "wx" display library.
 #=======================================================================
-#config_interface: textconfig
-config_interface: wx
+config_interface: textconfig
+#config_interface: wx
 
 #=======================================================================
 # DISPLAY_LIBRARY
@@ -59,8 +59,8 @@
 #display_library: sdl, options="fullscreen" # startup in fullscreen mode
 #display_library: term
 #display_library: win32, options="legacyF12" # use F12 to toggle mouse
-display_library: wx
-#display_library: x
+#display_library: wx
+display_library: x
 
 #=======================================================================
 # ROMIMAGE:

Modified: trunk/TODO
===================================================================
--- trunk/TODO	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/TODO	2008-12-30 20:38:10 UTC (rev 42)
@@ -1,4 +1,5 @@
 Dreamos Rebuild:
+Nella alloc fare il contrllo prima della funzione free_nodes.
 
 PROGETTI IMMEDIATI
 - Revisionare stampa esadecimale. Funzione _kprinthex
@@ -12,7 +13,6 @@
 - Eliminare il maggior numero di messaggi di errore dalla compilazione
 - bitmasks per interpretare errori del pagefault.
 - Rivedere il comando info della shell, probabilmente stampa alcune informazioni sbagliate
-- Script per generare automaticamente il file immagine grub.img
 
 
 PROGETTI A LUNGO TERMINE:

Modified: trunk/bl.img
===================================================================
(Binary files differ)

Modified: trunk/boot/grub.img
===================================================================
(Binary files differ)

Modified: trunk/dreamos.img
===================================================================
(Binary files differ)

Modified: trunk/include/libc/string.h
===================================================================
--- trunk/include/libc/string.h	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/include/libc/string.h	2008-12-30 20:38:10 UTC (rev 42)
@@ -31,7 +31,7 @@
 int _kstrncmp (const char *, const char *, int);
 void *memset(void *, const int, int);
 extern void * memmove(void *,const void *,size_t);
-int strlen (const char *);
+size_t strlen (const char *);
 char *strncpy (char *, const char *, size_t);
 char *strchr (const char *, int);
 char *strstr (const char *, const char *);

Modified: trunk/include/mem/kheap.h
===================================================================
--- trunk/include/mem/kheap.h	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/include/mem/kheap.h	2008-12-30 20:38:10 UTC (rev 42)
@@ -43,15 +43,16 @@
 typedef struct {
     heap_node_t* free_list; /** < Locazioni di memoria libere */
     heap_node_t* used_list; /** < Locazioni di memoria occupate */
+    heap_node_t* free_nodes; /** < Nodi liberati */
     unsigned int max_size; /** < Massima memoria allocabile */
 } heap_t;
 
-
 heap_t* make_heap(unsigned int, unsigned int, unsigned int);
 void* kmalloc(unsigned int);
 void kfree(unsigned int);
 void try_alloc();
 heap_node_t* alloc_node();
+void free_node();
 
 void* alloc(unsigned int, heap_t*);
 void free (void *);

Modified: trunk/include/version.h
===================================================================
--- trunk/include/version.h	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/include/version.h	2008-12-30 20:38:10 UTC (rev 42)
@@ -24,4 +24,4 @@
 #define PATCHLEVEL "0"
 #define EXTRAVERSION "-dreamos"
 #define NAME "DreamOS"
-#define REV_NUM "-r40"
+#define REV_NUM "-r41"

Modified: trunk/kernel.c
===================================================================
--- trunk/kernel.c	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/kernel.c	2008-12-30 20:38:10 UTC (rev 42)
@@ -87,8 +87,7 @@
     printf("End: %x\n", end);
     printf(LNG_PIT8253);
     configure_PIT ();
-    _kprintOK();
-
+    _kprintOK();    
     printf("Memory (upper) amount-> %d kb \n", boot_info->mem_upper);
     printf("Memory (lower) amount-> %d kb \n", boot_info->mem_lower);
     get_cpuid();    

Modified: trunk/libc/string.c
===================================================================
--- trunk/libc/string.c	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/libc/string.c	2008-12-30 20:38:10 UTC (rev 42)
@@ -42,7 +42,7 @@
 /*
  * Return the number of a string's characters
  */
-int strlen (const char *s)
+size_t strlen (const char *s)
 {
     int len = 0;
     while (*s != 0) { s++; len++; }

Modified: trunk/mem/fismem.c
===================================================================
--- trunk/mem/fismem.c	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/mem/fismem.c	2008-12-30 20:38:10 UTC (rev 42)
@@ -41,7 +41,7 @@
 
 void init_mem(){
     int i=0;
-    int remainder=0;
+//     int remainder=0;
     mem_info = mem_info_root;
     while(i<BITMAP_SIZE){
         if(i<16)mem_bitmap.mem_map[i] = 0xFFFFFFFF;
@@ -248,6 +248,7 @@
     mem_position = 16777216;
     tot_mem = (unsigned long) mem_position;
     return (unsigned long) mem_position;*/
+    return tot_mem;
 }
 
 /**

Modified: trunk/mem/kheap.c
===================================================================
--- trunk/mem/kheap.c	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/mem/kheap.c	2008-12-30 20:38:10 UTC (rev 42)
@@ -54,11 +54,13 @@
     alloc(60, kheap);
     alloc(50, kheap);
     alloc(100, kheap);
-//     alloc(6000, kheap);    
+    alloc(6000, kheap);    
     printf("Used\n");
     print_heap_list (kheap->used_list);
     printf("Free\n");
     print_heap_list (kheap->free_list);
+    printf("Free nodes\n");
+    print_heap_list(kheap->free_nodes);
 }
 
 /**
@@ -78,16 +80,18 @@
     new_heap = (heap_t*)0xC0000000;
     node_address = 0xC0000000 + sizeof(heap_t);
 //     new_heap = (heap_t*)kmalloc(sizeof(heap_t));
-
-    first_node = (heap_node_t*)alloc_node();
+//     first_node = (heap_node_t*)alloc_node();
+    first_node = (heap_node_t*)node_address;
+    node_address = node_address + sizeof(heap_node_t);
     first_node->start_address = (unsigned int)&end;
     first_node->size = size;
     first_node->next = NULL;
 
+    new_heap->free_nodes = NULL;
     new_heap->max_size = tot_mem-(unsigned int) &end;
     new_heap->free_list = first_node;
     new_heap->used_list = NULL;
-
+    new_heap->free_nodes = NULL;
     printf("First heap created...\n");   
     printf("Size: %d - Tot mem: %d - Start address: %x\n", (new_heap->free_list)->size, tot_mem, new_heap);    
     return (heap_t*) new_heap;
@@ -142,7 +146,7 @@
         }
         else if(aval_pages == n_pages){
             if(prev_node == free_heap_list) {                
-                kheap->free_list = free_heap_list->next;
+                kheap->free_list = (heap_node_t*)free_heap_list->next;
             }
             else prev_node->next = free_heap_list->next;
             insert_list (free_heap_list, &(cur_heap->used_list));            
@@ -171,10 +175,19 @@
   * @return The start address of the new allocated node
   */
 heap_node_t* alloc_node(){
-    unsigned int temp;
-    temp = node_address;
-    node_address = node_address + sizeof(heap_node_t);
-    return (heap_node_t*) temp;
+    unsigned int temp;    
+   heap_node_t *new_address;
+    if(kheap->free_nodes!=NULL){      
+      new_address = kheap->free_nodes;
+      kheap->free_nodes = new_address->next;
+      printf("riciclo un nodo\n");
+      return new_address;
+    }
+    else {
+      temp = node_address;
+      node_address = node_address + sizeof(heap_node_t);
+      return (heap_node_t*) temp;
+    }
 }
 
 /**
@@ -228,6 +241,8 @@
         #endif
         prev->size += busy->size;
         prev->next = n2;
+	free_node(busy);
+// 	insert_list (busy, &(kheap->free_nodes));
       }
       /* Merge n2 into busy */
       if (n2 && (busy->start_address + busy->size) == n2->start_address) {
@@ -236,6 +251,9 @@
         #endif
         busy->size += n2->size;
         busy->next = n2->next;
+// 	insert_list (n2, &(kheap->free_nodes));
+	printf("Node_address: %d\n", n2);
+	free_node(n2);
       }
 
       break;
@@ -256,12 +274,24 @@
   */
 void print_heap_list (heap_node_t *list)
 {
-   int count=0;
-   int prova;
+   int count=0;   
    while (list) {
-     printf ("%d) Current->start_address: %d size: %d\n", count++, list->start_address, list->size);     
+     printf ("%d) Node_address: %d, Current->start_address: %d size: %d\n", count++, list,list->start_address, list->size);     
      list = (heap_node_t*)list->next;
    }
    printf ("\n");
 }
 
+/**
+  * Free a memory info node.
+  * @author finarfin
+  * @version 1.0
+  * @param node Node in free_list or used_list to be freed 
+  */
+
+void free_node(heap_node_t* toadd){    
+    toadd->start_address = NULL;
+    toadd->size = 0;    
+    toadd->next = kheap->free_nodes;
+    kheap->free_nodes = toadd;        
+}
\ No newline at end of file

Modified: trunk/misc/ordered_list.c
===================================================================
--- trunk/misc/ordered_list.c	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/misc/ordered_list.c	2008-12-30 20:38:10 UTC (rev 42)
@@ -46,7 +46,7 @@
     /* Sorting by start address */
     while (swap->start_address < new_node->start_address) {
       previous = swap;
-      swap = swap->next;
+      swap = (heap_node_t*)swap->next;
       if (!swap) break;
     }
 

Modified: trunk/shell/shell.c
===================================================================
--- trunk/shell/shell.c	2008-11-23 22:22:51 UTC (rev 41)
+++ trunk/shell/shell.c	2008-12-30 20:38:10 UTC (rev 42)
@@ -68,8 +68,8 @@
 
 void shell()
 {
-	unsigned char cmd[256];
-	unsigned char string[256];
+	char cmd[256];
+	char string[256];
 	char *user = kmalloc(24);
 	memset(user, 0, strlen(user));
 
@@ -167,7 +167,7 @@
         {
             printf("kmalloc try: ...\n");
             int *b;
-            b = (int) kmalloc(10*sizeof(int));
+            b = (int*) kmalloc(10*sizeof(int));
             int i = 0;
             while(i<10){
                 b[i] = i*2;
@@ -186,7 +186,7 @@
     	{  
              printf ("Genero un pagefault scrivendo 10 nella locazione 0xa0000000...\n");
              int *prova;
-             prova = 0xa0000000;
+             prova = (int*)0xa0000000;
              *prova = 10;
               printf ("Contenuto della locazione 0xa0000000 dopo l'intervento dell'handler: %d\n", *prova);
         }
@@ -197,15 +197,17 @@
         
  	    else if (!(_kstrncmp(cmd,"free",4))) {
     	    unsigned int ptr = 425532;
-	        free(ptr);
+	        free((unsigned int*)ptr);
 	        ptr = 433724;
- 	        free(ptr);
+ 	        free((unsigned int*)ptr);
             ptr=446012;
-            free(ptr);
+            free((unsigned int*)ptr);
             printf("Navigating used list...\n");
             print_heap_list (kheap->used_list);
             printf("Navigating free list...\n");
             print_heap_list (kheap->free_list);
+	    printf("Navigati free nodes...\n");
+            print_heap_list (kheap->free_nodes);
 	    }
         else if (!(_kstrncmp(cmd,"printmem",8))) print_heap_list(kheap->used_list);        
         else if (!(_kstrncmp(cmd,"aalogo",6))) 



